#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ TorParallelRunner –∏ HAProxy –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫–∞
"""

import logging
import time
import threading
from pathlib import Path
from typing import List, Optional

from tor_parallel_runner import TorParallelRunner
from config_manager import TorConfigBuilder
from haproxy_tor_pool_manager import (
    HAProxyTorPoolManager,
    DEFAULT_FRONTEND_PORT,
    DEFAULT_STATS_PORT,
)
from tor_relay_manager import TorRelayManager

logger = logging.getLogger(__name__)


class TorBalancerManager:
    """–ï–¥–∏–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø—É–ª–∞ Tor + HAProxy."""

    def __init__(self,
                 frontend_port: int = 9999,
                 stats_port: int = 8404,
                 base_tor_port: int = 10000,
                 config_dir: Optional[str] = None,
                 max_workers: int = 10,
                 config_builder: Optional[TorConfigBuilder] = None,
                 runner: Optional[TorParallelRunner] = None,
                 checker=None,
                 http_balancer: Optional[HAProxyTorPoolManager] = None,
                 relay_manager: Optional[TorRelayManager] = None):
        if frontend_port != DEFAULT_FRONTEND_PORT:
            logger.warning(
                "–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π frontend_port=%s, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π %s",
                frontend_port,
                DEFAULT_FRONTEND_PORT,
            )
        if stats_port != DEFAULT_STATS_PORT:
            logger.warning(
                "–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π stats_port=%s, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π %s",
                stats_port,
                DEFAULT_STATS_PORT,
            )

        self.frontend_port = DEFAULT_FRONTEND_PORT
        self.stats_port = DEFAULT_STATS_PORT
        self.base_tor_port = base_tor_port

        # –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º API: —Å–æ—Ö—Ä–∞–Ω—è–µ–º checker –∏ runner, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã
        self.config_builder = config_builder or TorConfigBuilder()
        self.checker = checker

        self.tor_runner = runner or TorParallelRunner(
            config_builder=self.config_builder,
            max_workers=max_workers
        )
        self.runner = self.tor_runner

        config_path = Path(config_dir) / "haproxy.cfg" if config_dir else None

        self.haproxy_manager = http_balancer or HAProxyTorPoolManager(
            tor_runner=self.tor_runner,
            config_path=str(config_path) if config_path else None
        )

        self.relay_manager = relay_manager or TorRelayManager()

        self._running = False
        self._lock = threading.RLock()
        self._allocated_ports: List[int] = []
        self._start_time: Optional[float] = None

    def _find_free_ports(self, count: int) -> List[int]:
        """–ù–∞—Ö–æ–¥–∏—Ç —Å–≤–æ–±–æ–¥–Ω—ã–µ –ø–æ—Ä—Ç—ã –¥–ª—è Tor –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
        import socket
        
        free_ports = []
        port = self.base_tor_port
        max_attempts = count * 10
        
        while len(free_ports) < count and (port - self.base_tor_port) < max_attempts:
            if self._is_port_free(port):
                free_ports.append(port)
            port += 1
            
        if len(free_ports) < count:
            raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ {count} —Å–≤–æ–±–æ–¥–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤")
            
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(free_ports)} —Å–≤–æ–±–æ–¥–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤: {free_ports}")
        return free_ports

    def _is_port_free(self, port: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–≤–æ–±–æ–¥–µ–Ω –ª–∏ –ø–æ—Ä—Ç"""
        import socket
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
                s.bind(('127.0.0.1', port))
                return True
        except OSError:
            return False

    def _resolve_exit_nodes(self, exit_nodes: List[str], tor_count: int) -> List[str]:
        if exit_nodes:
            return exit_nodes

        logger.info("üîé –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º exit-–Ω–æ–¥—ã —á–µ—Ä–µ–∑ TorRelayManager")

        try:
            relay_data = self.relay_manager.fetch_tor_relays()
        except Exception as exc:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ Tor —Ä–µ–ª–µ—è—Ö: {exc}")
            return []

        if not relay_data:
            logger.error("TorRelayManager –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–ª–µ–µ–≤")
            return []

        relay_entries = self.relay_manager.extract_relay_ips(relay_data)
        if not relay_entries:
            logger.error("TorRelayManager –Ω–µ —Å–º–æ–≥ –∏–∑–≤–ª–µ—á—å –Ω–∏ –æ–¥–Ω–æ–π exit-–Ω–æ–¥—ã")
            return []

        target_total = max(tor_count, tor_count * 6)
        unique_ips: List[str] = []
        seen = set()
        for entry in relay_entries:
            ip = entry.get('ip')
            if not ip or ip in seen:
                continue
            seen.add(ip)
            unique_ips.append(ip)
            if len(unique_ips) >= target_total:
                break

        if len(unique_ips) < tor_count:
            logger.warning(
                f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ exit-–Ω–æ–¥: {len(unique_ips)} –Ω–∞–π–¥–µ–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º {tor_count}"
            )
        else:
            logger.info(f"üåç –ò—Å–ø–æ–ª—å–∑—É–µ–º {len(unique_ips)} exit-–Ω–æ–¥, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∏–∑ TorRelayManager")

        return unique_ips

    def _distribute_exit_nodes(self, exit_nodes: List[str], tor_count: int) -> List[List[str]]:
        """–†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç exit nodes –º–µ–∂–¥—É Tor –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏"""
        if not exit_nodes:
            return [[] for _ in range(tor_count)]
            
        nodes_per_tor = max(1, len(exit_nodes) // tor_count)
        distributed = []
        
        for i in range(tor_count):
            start_idx = i * nodes_per_tor
            end_idx = min(start_idx + nodes_per_tor, len(exit_nodes))
            distributed.append(exit_nodes[start_idx:end_idx])
            
        return distributed

    def start_pool(self, tor_count: int, exit_nodes: List[str] = None) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π –ø—É–ª: Tor –ø—Ä–æ—Ü–µ—Å—Å—ã + HAProxy –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤—â–∏–∫"""
        with self._lock:
            if self._running:
                logger.warning("–ü—É–ª —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
                return True
                
            try:
                logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—É–ª–∞: {tor_count} Tor –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ + HAProxy")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
                deps_ok, missing = self.haproxy_manager.check_dependencies()
                if not deps_ok:
                    logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {', '.join(missing)}")
                    return False
                
                # –ù–∞—Ö–æ–¥–∏–º —Å–≤–æ–±–æ–¥–Ω—ã–µ –ø–æ—Ä—Ç—ã
                ports = self._find_free_ports(tor_count)
                self._allocated_ports = ports
                
                resolved_exit_nodes = self._resolve_exit_nodes(exit_nodes or [], tor_count)

                # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º exit nodes
                exit_nodes_per_tor = self._distribute_exit_nodes(resolved_exit_nodes, tor_count)
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º Tor –ø—Ä–æ—Ü–µ—Å—Å—ã (–±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è health check)
                logger.info(f"‚è≥ –ó–∞–ø—É—Å–∫ {tor_count} Tor –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è health-check")
                started_ports = self.tor_runner.start_many(ports, exit_nodes_per_tor)
                if len(started_ports) < tor_count:
                    logger.warning(
                        f"–ó–∞–ø—É—Å–∫ Tor –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é: {len(started_ports)}/{tor_count} –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —Å–æ–æ–±—â–∏–ª–∏ –æ–± —É—Å–ø–µ—Ö–µ"
                    )

                # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é HAProxy –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ª—É–∂–±—É
                logger.info("‚öôÔ∏è –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ HAProxy —á–µ—Ä–µ–∑ systemd reload")
                if not self.haproxy_manager.apply_config(started_ports):
                    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é HAProxy")
                    self.tor_runner.stop_all()
                    return False
                
                self._running = True
                self._start_time = time.time()
                self._allocated_ports = started_ports

                logger.info("üéâ –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—É–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
                return True
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—É–ª–∞: {e}")
                self.stop_pool()
                return False

    def stop_pool(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–µ—Å—å –ø—É–ª"""
        with self._lock:
            if not self._running:
                return
                
            logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—É–ª–∞...")
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Tor –ø—Ä–æ—Ü–µ—Å—Å—ã
            self.tor_runner.stop_all()

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é HAProxy, —á—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å –±—ç–∫–µ–Ω–¥
            try:
                if not self.haproxy_manager.apply_config([]):
                    logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é HAProxy –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ")
            except Exception as exc:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é HAProxy –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: %s", exc)
            
            self._running = False
            self._allocated_ports = []
            self._start_time = None
            logger.info("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—É–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    def get_stats(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        with self._lock:
            haproxy_stats = self.haproxy_manager.get_stats()
            tor_statuses = self.tor_runner.get_statuses()
            uptime = 0.0
            if self._start_time:
                uptime = max(0.0, time.time() - self._start_time)
            
            return {
                'pool_running': self._running,
                'haproxy_running': haproxy_stats['haproxy_running'],
                'tor_processes_total': len(tor_statuses),
                'tor_processes_running': haproxy_stats['tor_processes_running'],
                'tor_ports': haproxy_stats['tor_ports'],
                'frontend_port': haproxy_stats['frontend_port'],
                'stats_port': haproxy_stats['stats_port'],
                'config_dir': haproxy_stats['config_dir'],
                'uptime': uptime
            }

    def is_running(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ –ø—É–ª"""
        return self._running

    @property
    def pid_file(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ PID-—Ñ–∞–π–ª—É HAProxy."""
        return self.haproxy_manager.pid_file

    def __del__(self):
        """Cleanup –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏"""
        try:
            if self._running:
                self.stop_pool()
        except:
            pass


# –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –ø—Ä–µ–∂–Ω–∏–º –∏–º–µ–Ω–µ–º
TorHAProxyIntegrator = TorBalancerManager