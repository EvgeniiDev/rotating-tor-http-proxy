#!/usr/bin/env python3
import os
import sys
import logging
import signal
import time
import threading

from http_load_balancer import HTTPLoadBalancer
from tor_pool_manager import TorBalancerManager
from config_manager import TorConfigBuilder
from tor_parallel_runner import TorParallelRunner
from exit_node_tester import ExitNodeChecker
from tor_relay_manager import TorRelayManager

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

def main():
    print("Starting Tor HTTP Proxy with new architecture...")
    
    # –°–æ–∑–¥–∞—ë–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
    config_builder = TorConfigBuilder()
    checker = ExitNodeChecker(test_requests_count=3, required_success_count=2, timeout=10)  # –£–ø—Ä–æ—â–∞–µ–º —Ç–µ—Å—Ç—ã
    runner = TorParallelRunner(config_builder)
    balancer = HTTPLoadBalancer(listen_port=8080)
    manager = TorBalancerManager(config_builder, checker, runner, balancer)
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback exit-–Ω–æ–¥—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        print("Using fallback exit nodes for testing...")
        exit_nodes = [
            "185.220.100.240",
            "185.220.100.241", 
            "185.220.100.242",
            "95.216.143.131",
            "185.220.102.4"
        ]
        print(f"Testing {len(exit_nodes)} exit nodes")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—É–ª —Å 2 –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        print("Starting Tor pool with 2 processes...")
        success = manager.run_pool(count=2, exit_nodes=exit_nodes)
        
        if success:
            print("‚úÖ Pool started successfully!")
            print(f"üåê HTTP proxy is running on http://localhost:8080")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = manager.get_stats()
            print(f"üìä Pool stats: {stats}")
            
            print("üîÑ Proxy is ready! Test with:")
            print("   curl -x http://localhost:8080 https://httpbin.org/ip")
            print("")
            print("‚è±Ô∏è  Running for 30 seconds... (Press Ctrl+C to stop)")
            time.sleep(30)
            
        else:
            print("‚ùå Failed to start pool")
            
    except KeyboardInterrupt:
        print("\nüõë Shutting down...")
    except Exception as e:
        print(f"‚ùå Error: {e}")
    finally:
        manager.stop()
        print("‚úÖ Pool stopped")

if __name__ == "__main__":
    main()
