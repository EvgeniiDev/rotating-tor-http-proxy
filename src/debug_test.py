#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å Tor
"""
import logging
import time
import subprocess
import tempfile
import os
from config_manager import TorConfigBuilder

logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')

def debug_tor():
    print("üîç Debugging Tor setup...")
    
    # 1. –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ñ–∏–≥
    config_builder = TorConfigBuilder()
    port = 9050
    
    print(f"üìù Creating config for port {port}...")
    config_content = config_builder.build_config_without_exit_nodes(port)
    print("‚úÖ Config content:")
    print(config_content)
    print()
    
    # 2. –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    temp_fd, config_file = tempfile.mkstemp(suffix='.torrc', prefix=f'debug_tor_{port}_')
    with os.fdopen(temp_fd, 'w') as f:
        f.write(config_content)
    
    print(f"üíæ Config saved to: {config_file}")
    
    try:
        # 3. –ó–∞–ø—É—Å–∫–∞–µ–º Tor —Å –ª–æ–≥–∞–º–∏
        print("üöÄ Starting Tor with logs...")
        cmd = ['tor', '-f', config_file]
        print(f"Command: {' '.join(cmd)}")
        
        process = subprocess.Popen(
            cmd,
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            text=True
        )
        
        print("‚è≥ Waiting for Tor to start (20 seconds)...")
        time.sleep(20)
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Ü–µ—Å—Å–∞
        if process.poll() is None:
            print("‚úÖ Tor process is running")
        else:
            print(f"‚ùå Tor process died with code: {process.returncode}")
            print("üìú Process output:")
            output, _ = process.communicate()
            print(output)
            return False
        
        # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        print("üåê Testing connection...")
        import requests
        proxies = {'http': f'socks5://127.0.0.1:{port}', 'https': f'socks5://127.0.0.1:{port}'}
        
        try:
            response = requests.get('https://api.ipify.org?format=json', proxies=proxies, timeout=15)
            if response.status_code == 200:
                result = response.json()
                print(f"‚úÖ Connection successful! Exit IP: {result.get('ip')}")
                return True
            else:
                print(f"‚ùå HTTP error: {response.status_code}")
        except requests.RequestException as e:
            print(f"‚ùå Connection failed: {e}")
        
        return False
        
    finally:
        print("üõë Stopping Tor...")
        if process and process.poll() is None:
            process.terminate()
            try:
                process.wait(timeout=5)
            except subprocess.TimeoutExpired:
                process.kill()
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if os.path.exists(config_file):
            os.unlink(config_file)
        
        print("‚úÖ Cleanup complete")

if __name__ == "__main__":
    success = debug_tor()
    if success:
        print("üéä Tor works correctly!")
    else:
        print("üí• Tor debugging failed!")