global
  log stdout format raw local0
  pidfile /var/local/haproxy/haproxy.pid
  maxconn 4096
  user proxy
  stats socket /var/local/haproxy/haproxy.sock mode 666 level admin
  stats timeout 2m
  # Enable runtime server management
  server-state-file /var/local/haproxy/server-state

defaults
  mode tcp
  log global
  option dontlognull
  option redispatch
  retries 3
  timeout queue 2m
  timeout connect 30s
  timeout client 2m
  timeout server 2m
  timeout check 30s
  maxconn 4096
  # Load server state for persistence across reloads
  load-server-state-from-file global

listen stats
  bind 0.0.0.0:4444
  mode http
  log global
  maxconn 30
  timeout client 100s
  timeout server 100s
  timeout connect 100s
  timeout queue 100s
  stats enable
  stats hide-version
  stats refresh 30s
  stats show-desc Rotating Tor SOCKS5 Proxy
  stats show-legends
  stats show-node
  stats uri /

frontend socks5_proxy
  bind 0.0.0.0:1080
  mode tcp
  default_backend tor_socks5

backend tor_socks5
  mode tcp
  balance roundrobin
  
  # Very simple configuration - HAProxy will just check if it can connect
  # This is the most compatible approach for Tor SOCKS proxies
  default-server check
  
  # Backend is populated via Runtime API
  # Uncomment and modify the following line to add a static server for testing
  # server tor0 127.0.0.1:10000 check
  # Backend starts empty - servers added via Runtime API
  # This allows for dynamic server management without config reloads
